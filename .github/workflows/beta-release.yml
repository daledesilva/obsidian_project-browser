name: Draft beta release

# To Run:
# Run from any NON_MAIN branch (ie. release_*)
# 1. Update manifest-beta version in release branch
# 2. git push origin HEAD
# 3. git tag <version number>
# 4. git push origin --tags
# This will create a draft beta release

# To publish:
# 1. Refine release body text
# 2. Publish release
# 3. Switch to main branch and merge in release
# 4. git push origin HEAD

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'  # Matches semantic versions like 1.2.3
      - '[0-9]+.[0-9]+.[0-9]+.[0-9]+'  # Matches semantic versions like 1.2.3.4

jobs:


  check-current-branch:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.check_step.outputs.branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0


      - name: Get current branch
        id: check_step
        # 1. Get the list of branches ref where this tag exists
        # 2. Remove 'origin/' from that result
        # 3. Put that string in output
        # => We can now use function 'contains(list, item)''
        run: |
          raw=$(git branch -r --contains ${{ github.ref }})
          branch="$(echo ${raw//origin\//} | tr -d '\n')"
          echo "{name}=branch" >> $GITHUB_OUTPUT
          echo "Branches where this tag exists : $branch."



  build:
    runs-on: ubuntu-latest
    
    # only run if the initiating tag is not on the main branch
    if: contains(needs.check.outputs.branch, 'main') == false

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # You might need to adjust this value to your own version


      # Get the version number and put it in a variable
      - name: Get Version
        id: version
        run: |
          echo "version=$(git describe --abbrev=0 | sed 's/-beta//')" >> $GITHUB_OUTPUT


      # Build the plugin
      - name: Build
        id: build
        run: |
          npm install
          npm run build --if-present


      # Package the required files into a zip
      # Using manifest-beta.json in place of manifest.json
      - name: Package
        run: |
          mkdir ${{ github.event.repository.name }}
          cp ./dist/manifest-beta.json ${{ github.event.repository.name }}/manifest.json
          cp ./dist/main.js ${{ github.event.repository.name }}
          cp ./dist/styles.css ${{ github.event.repository.name }}
          cp README.md ${{ github.event.repository.name }}
          zip -r ${{ github.event.repository.name }}.zip ${{ github.event.repository.name }}


      # Create the release on github
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.version }}
          release_name: ${{ env.version }}
          body: |
            ### Added this update:
            
            ### Broken this update:
            
            Watch the [release video]().
          draft: true
          prerelease: true

          

      # Upload the packaged release file
      - name: Upload zip file
        id: upload-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ github.event.repository.name }}.zip
          asset_name: ${{ github.event.repository.name }}-${{ steps.version.outputs.tag }}.zip
          asset_content_type: application/zip
      
      # Upload the main.js
      - name: Upload main.js
        id: upload-main
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ${{ github.event.repository.name }}/main.js
          asset_name: main.js
          asset_content_type: text/javascript
      
      # Upload the manifest.json
      - name: Upload manifest.json
        id: upload-manifest
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ${{ github.event.repository.name }}/manifest.json
          asset_name: manifest.json
          asset_content_type: application/json
      
      # Upload the style.css
      - name: Upload styles.css
        id: upload-css
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ${{ github.event.repository.name }}/styles.css
          asset_name: styles.css
          asset_content_type: text/css
