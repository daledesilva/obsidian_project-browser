name: Publish internal release

# To Run:
# Run from any non-main branch (ie. release_*)
# 1. push branch
# It will auto-publish the release as a prerelease

on:
  push:
    branches-ignore:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # otherwise, you will failed to push refs to dest repo
        
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x' # You might need to adjust this value to your own version



    # Build the plugin
    - name: Build
      id: build
      run: |
        npm install
        npm run build --if-present


    # Package the required files into a zip
    # Using manifest-beta.json in place of manifest.json
    - name: Package
      run: |
        mkdir ${{ github.event.repository.name }}
        cp ./dist/manifest-beta.json ${{ github.event.repository.name }}/manifest.json
        cp ./dist/main.js ${{ github.event.repository.name }}
        cp ./dist/styles.css ${{ github.event.repository.name }}
        cp README.md ${{ github.event.repository.name }}
        zip -r ${{ github.event.repository.name }}.zip ${{ github.event.repository.name }}


    # Create the release on github
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: internal-release
        release_name: Internal Release
        body: |
          ### Added this update:
          
          ### Broken this update:
          
          Watch the [release video]().
        draft: false
        prerelease: true


    # Upload the packaged release file
    - name: Upload zip file
      id: upload-zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ github.event.repository.name }}.zip
        asset_name: ${{ github.event.repository.name }}-${{ steps.version.outputs.tag }}.zip
        asset_content_type: application/zip
    
    # Upload the main.js
    - name: Upload main.js
      id: upload-main
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ${{ github.event.repository.name }}/main.js
        asset_name: main.js
        asset_content_type: text/javascript
    
    # Upload the manifest.json
    - name: Upload manifest.json
      id: upload-manifest
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ${{ github.event.repository.name }}/manifest.json
        asset_name: manifest.json
        asset_content_type: application/json
    
    # Upload the style.css
    - name: Upload styles.css
      id: upload-css
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ${{ github.event.repository.name }}/styles.css
        asset_name: styles.css
        asset_content_type: text/css
