name: Draft public release

# To Run:
# 1. Update manifest.json version in release branch
# 2. merge release branch into main
# 1. git push origin HEAD
# 2. git tag <version number>
# 3. git push origin --tags
# This will create a draft release ready for public release

# To publish:
# 1. Refine release body text
# 2. Publishing the draft release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'  # Matches semantic versions like 1.2.3
      - '[0-9]+.[0-9]+.[0-9]+.[0-9]+'  # Matches semantic versions like 1.2.3.4
      - '!*-beta'  # Excludes any tags ending in -beta

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # otherwise, you will failed to push refs to dest repo
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x' # You might need to adjust this value to your own version

    # Don't run if being called from a branch other than main
    - name: Branch check
      run: |
        if [[ $(git branch --contains ${{ github.ref }}) != *"main"* ]]; then
          echo "Error: Public releases must be deployed from main branch"
          exit 1
        fi

    # Build the plugin
    - name: Build
      id: build
      run: |
        npm install
        npm run build --if-present

    # Package the required files into a zip
    - name: Package
      run: |
        mkdir ${{ github.event.repository.name }}
        cp ./dist/manifest.json ${{ github.event.repository.name }}
        cp ./dist/main.js ${{ github.event.repository.name }}
        cp ./dist/styles.css ${{ github.event.repository.name }}
        cp README.md ${{ github.event.repository.name }}
        zip -r ${{ github.event.repository.name }}.zip ${{ github.event.repository.name }}

    # Create the release on github
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: ${{ github.ref_name }}
        draft: true
        prerelease: false

    # Upload the packaged release file
    - name: Upload zip file
      id: upload-zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ github.event.repository.name }}.zip
        asset_name: ${{ github.event.repository.name }}-${{ steps.version.outputs.tag }}.zip
        asset_content_type: application/zip
    
    # Upload the main.js
    - name: Upload main.js
      id: upload-main
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ${{ github.event.repository.name }}/main.js
        asset_name: main.js
        asset_content_type: text/javascript
    
    # Upload the manifest.json
    - name: Upload manifest.json
      id: upload-manifest
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ${{ github.event.repository.name }}/manifest.json
        asset_name: manifest.json
        asset_content_type: application/json
    
    # Upload the style.css
    - name: Upload styles.css
      id: upload-css
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ${{ github.event.repository.name }}/styles.css
        asset_name: styles.css
        asset_content_type: text/css

    # TODO: release notes???